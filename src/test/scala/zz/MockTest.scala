package zz

import com.datastax.spark.connector.cql.CassandraConnector
import com.google.common.collect.ImmutableMap
import org.apache.spark.sql.SparkSession
import org.mockito.Mockito
import zz.test.CountTest.ss
import org.mockito.Mockito._
import org.mockito.{ArgumentMatchers, Mockito}

/**
  * Created by zulk on 11.04.17.
  */
case class A(a:String)
class MockTestSpec
//  extends FlatSpec with Matchers
{

// it should "pop sss" in {
//
//   val q = new PrimeQueryStore()
////   val server = new ScassandraServer(q,"127.0.0.1",9999,"127.0.0.1",9991)
//
//   val s = ScassandraFactory.createServer(9999,9991)
//   s.start()
//
//   val pc = s.primingClient()
//
//   val names = "key,bootstrapped,broadcast_address,cluster_name,cql_version,data_center,gossip_generation,host_id,listen_address,native_protocol_version,partitioner,rack,release_version,rpc_address,schema_version,thrift_version,tokens,truncated_at".split(",")
//   val values = "'local','COMPLETED','172.17.0.2','Test Cluster','3.4.0','datacenter1',1491943107,579797d2-d7c5-42d9-895c-814e6c0ed41d,'172.17.0.2','4','org.apache.cassandra.dht.Murmur3Partitioner','rack1','3.0.8','0.0.0.0',09c09f08-545d-377e-b041-220c65119050,'20.1.0',{'-1010037745343432193','-1032656479037290998','-1044093618686838776','-1082906667199811028','-1108862173029547436','-1156370875621164171','-1182276707252858705','-1217444544706536780','-122267164110265898','-1235940268269832452','-1280393829959595954','-1405276651285124980','-143829171320302441','-149328028745677005','-1541354072459106260','-1551358830333659738','-1564255114207111625','-1637879477931111145','-1638963752783856438','-1694810345968834028','-1695776876851934864','-1853839649750328547','-1926080648522151152','-1938574878268770543','-1962810462965979530','-1970658535142310577','-2043996107296775531','-2100105872183920395','-2163893896022643021','-2167499416574431907','-2171447416620327174','-2206943381756322223','-2311973180171202593','-233931814510467132','-2443622848313635619','-2530949708842140599','-2566717217184129780','-2603976858283671434','-2614401948240234948','-2818892111676071892','-2886962967373428098','-2985677828979544612','-2988272041618652751','-3012214221013399048','-3082218482663357141','-3093856076249641824','-3187268594590406927','-3326303421805768435','-3406250609238537069','-3433071983883515724','-3454633937970861097','-3459479600854675567','-3482665006962560796','-356779785417395084','-3577671344881806024','-3777534843725572096','-3819031605863273948','-3877343450475432565','-3932598924969059017','-4008953364644978150','-4053841075581105018','-4332712502405124850','-452930637807149216','-4533442437822867528','-4635874980659739088','-4645247980990734535','-4739144540308032870','-4757282254760626112','-4767686288670811353','-4918675514900980779','-492341587128138545','-4932959096422532252','-4977571989110449394','-5032899625484800039','-5130705163695840740','-5196085827498337717','-5281921573907925535','-5323876307312546109','-5545592117185920465','-5753667507572074020','-5828072232543939392','-5858333846097470432','-5893156900979053854','-5895562478145325531','-5910044523007864000','-6000085643610862975','-6058514678942233132','-6115349267294722052','-6115971867585869440','-6169703074447907911','-6345448387891931667','-6394589824980494588','-6463229744897854244','-6570023886628713001','-6570825001883453892','-6594013581291866972','-6740158397149969524','-6766476628827453491','-6792947796876592505','-6947765780819241023','-6955922891687801827','-7001119971037863932','-7132256009793050791','-7276561624176486999','-7517604654056499131','-761295364391093811','-7676272302078410532','-7902830911665385601','-7917868804577431469','-7925050466410298261','-8017467247625985301','-8213074529978959371','-8233666030659121280','-8341234442460895601','-8361048568409459442','-8379043232395676777','-8404540123915223020','-8543535469169095079','-8593447118604288772','-864753392479609501','-8701488877723559288','-8925660034265328218','-8981883034790977739','-8987564018777793536','-9008662072062878089','-9023661505429777802','-9049356138901072069','-9172572085226515335','-992522469460945640','1105008630340445010','1106241979098006593','1309447317305411822','1326411754526841753','1394055425815994875','1445657403817780008','1519366996382908865','1671692941212971816','1832889926802699666','1835235275579054708','1888276381247877590','1900362906937903740','193076552226315306','1948042634013746239','1969234666561092210','199536774208273554','2048382711543753611','2080372452823020891','2101095877073879137','221872503523903022','2230493278561655372','2303102338252492467','235557803510199492','2379867413397579645','244746714788539924','2455834695758350738','2667566453529258061','2698343206206834740','2703341672899811468','273230433074351846','2745151378800120991','2792493760886857502','2840445271943397093','2842912129185371650','284823381511623055','2979129453517071425','302922061337162334','3036087503970955899','3142733900843033819','3153681888551806161','3184648388797805534','3257762270722907774','3342537820007466754','3357254483631178948','3393270108688984995','3465210315682053691','3496429262568204322','3585696377852327298','3743363882489776992','3780088451171424188','3801430237528803164','3854377189879426246','3897735803603012623','4246364091213523090','4286592676598169322','4332719235064563756','4335911414276617252','4413104853079590267','4440852563809360190','4593200204326103425','4681551258979466799','4841483801203252805','4863866331872333651','4870809174835022184','4936417731292862477','5044236822660816139','504885348624323564','5316768603617912288','5436650222790120068','5515404095898038714','5529857318503536343','5583578927369169351','5617413345499983906','5646576357196311423','5779322254680347487','5849987978791133355','5884969641531248418','5915691249550978764','5928208205751888675','5928583595255447335','6052470931848352683','6131528944620228144','6166161205855411799','621607000595499618','6331285120066986830','6382030612602999366','6456206262936445735','646558526217618269','6512956713841906963','6545166864037784244','6596283636181309504','6693739285824194787','6718964513070771982','6822164512192974860','6866742221652026367','6963412217859677160','7005896014734833521','7059740088201108695','7185569541203505426','7224546758838183088','723423941790449686','731406558517854706','7337622209083098093','7343372027379822232','7778976955628739195','7937330108335485050','7945747059393390376','8018155857815756046','8033902386735381585','8098516614887547835','8142430800215425510','8153807705937643809','8231724383767929204','8290067385377740314','8338704311075752471','8594062377455077584','8643684547401045305','8646961829486381828','8662062363193531349','8752025223804915158','8846556273777327152','8878443710475579953','8978473049663331975','9022481496163277094','9029299673173638063','975358846053543744','991549708135496895'},{dbc2c600-1588-11e7-b428-6d2c86545d91:0x0000015b20e0ae99000134ee0000015b2104374d,8826e8e9-e16a-3728-8753-3bc1fc713c25:0x0000015748bd98470006b9b900000157495b54cd,c5e99f16-8677-3914-b17e-960613512345:0x0000015748bd98470004e6a60000015749578362}"
//
//
//
//   val rows = ImmutableMap.of("cluster_name","CCC",
//     "partitioner","org.apache.cassandra.dht.Murmur3Partitioner",
//     "data_center","datacenter1",
//     "rack","rack1",
//     "release_version","3.4.0"
//   )
//
//   val x = pc.prime(queryBuilder()
//     .withQuery("SELECT * FROM system.local WHERE key='local'")
//     .withThen(then()
//       .withColumnTypes(column("cluster_name",PrimitiveType.VARCHAR))
//       .withRows(rows)
//     ).build())
//
//   val y = pc.prime(queryBuilder()
//     .withQuery("SELECT * FROM system.peers")
//     .withThen(then()
//       .withColumnTypes(column("c",PrimitiveType.INT))
//       .withRows(rows)
//     ).build())
//
//   val ss = SparkSession.builder().master("local[*]").appName("app")
//     .config("es.index.auto.create", "true")
//     .config("es.nodes", "localhost")
//     .config("spark.executor.memory", "2G")
//     .config("spark.serializer", "org.apache.spark.serializer.KryoSerializer")
//     .config("spark.cassandra.connection.host", "127.0.0.1")
//     .config("spark.cassandra.connection.port", "9999")
//     .getOrCreate();
//
//
//   import ss.implicits._
//   val d= Seq(A("a"),A("b")).toDS()
//
//   import com.datastax.spark.connector._
//
//   val i = d.rdd.joinWithCassandraTable[A]("c","x")
//   .map(x => x._2).foreach(f => {
//     println(f)
//   })
//
//   println(i)

//   val df1 = ss.read.format("org.apache.spark.sql.cassandra")
//     .options(Map( "table" -> "words", "keyspace" -> "test2" )).load()
//
//   df1.show()

}
